worker_processes  1;
daemon on;
master_process off;
error_log /root/git/rainingmaster/lua-shdict-nginx-module/t/servroot/logs/error.log debug;
pid       /root/git/rainingmaster/lua-shdict-nginx-module/t/servroot/logs/nginx.pid;
env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env LD_LIBRARY_PATH;
env DYLD_INSERT_LIBRARIES;
env DYLD_FORCE_FLAT_NAMESPACE;
#env LUA_PATH;
#env LUA_CPATH;

stream {

    lua_package_path "/root/git/rainingmaster/lua-shdict-nginx-module/t/lib/?.lua;/root/git/rainingmaster/lua-shdict-nginx-module/lib/?.lua;;";
    lua_shared_mem tinydogs 50k;
    lua_shared_mem smalldogs 100k;
    lua_shared_mem dogs 1m;
    lua_shared_mem cats 1m;

    server {
        listen 1985;

    content_by_lua_block {
        local t = require("resty.shdict")
        local dogs = t.dogs
        local key = 56
        local ok, err = dogs:set(key, 1)
        if not ok then
            ngx.say("set not ok: ", err)
            return
        end
        ngx.say("set ok")
        ok, err = dogs:incr(key, "32")
        if not ok then
            ngx.say("incr not ok: ", err)
            return
        end
        ngx.say("incr ok")
        local data, err = dogs:get(key)
        if data == nil and err then
        ngx.say("get not ok: ", err)
            return
        end
        local flags = err
        ngx.say("get ok: ", data, ", flags: ", flags)

    }

    }
}


http {
    access_log /root/git/rainingmaster/lua-shdict-nginx-module/t/servroot/logs/access.log;
    #access_log off;

    default_type text/plain;
    keepalive_timeout  68;



    server {
        listen          1984;
        server_name     'localhost';

        client_max_body_size 30M;
        #client_body_buffer_size 4k;

        # Begin preamble config...

        # End preamble config...

        # Begin test case config...
            lua_socket_log_errors off;

            location = /t {
                content_by_lua_block {
                    local sock, err = ngx.socket.tcp()
                    assert(sock, err)

                    local ok, err = sock:connect("127.0.0.1", 1985)
                    if not ok then
                        ngx.say("connect to stream server error: ", err)
                        return
                    end

                    local data, err = sock:receive("*a")
                    if not data then
                        sock:close()
                        ngx.say("receive stream response error: ", err)
                        return
                    end
                    ngx.print(data)
                }
            }

        # End test case config.

        location / {
            root /root/git/rainingmaster/lua-shdict-nginx-module/t/servroot/html;
            index index.html index.htm;
        }
    }
}



#timer_resolution 100ms;

events {
    accept_mutex off;

    worker_connections  64;
}
env ASAN_OPTIONS;
